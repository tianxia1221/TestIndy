1. error 1 ÷ÿ∏¥nym req
nymResponseJson:
{"identifier":"V4SGRU86Z58d6TV7PBUe6f","reason":"client request invalid: UnauthorizedClientRequest('actor must be owner',)","op":"REJECT","reqId":1553572646138721800}

static void demoStewardCreateCred() throws Exception {
		
		
		// Set protocol version 2 to work with Indy Node 1.4
		Pool.setProtocolVersion(PROTOCOL_VERSION).get();
		
		//1. Create and Open Pool
		String DEFAULT_POOL_NAME = "default_pool";
		String poolName = PoolUtils.createPoolLedgerConfig();
		Pool pool = Pool.openPoolLedger(poolName, "{}").get();
		String stewardSeed = "000000000000000000000000Steward1";
		//String stewardSeed = "tx0000000000000000000000txeward2";
		
		//2. Issuer Create and Open Wallet		
		String issuerWalletConfig = "{\"id\":\"govWallet\"}";
		String issuerWalletCredentials = "{\"key\":\"gov_wallet_key\"}";
		Wallet.createWallet(issuerWalletConfig, issuerWalletCredentials).get();
		Wallet stewardWallet = Wallet.openWallet(issuerWalletConfig, issuerWalletCredentials).get();
		
		System.out.println("\n2. Generating and storing steward DID and Verkey\n");
		String did_json = "{\"seed\": \"" + stewardSeed + "\"}";
		DidResults.CreateAndStoreMyDidResult stewardResult = Did.createAndStoreMyDid(stewardWallet, did_json).get();
		//DidResults.CreateAndStoreMyDidResult stewardResult = Did.createAndStoreMyDid(issuerWallet, "{}").get();
		//CreateAndStoreMyDidResult createMyDidResult = Did.createAndStoreMyDid(myWallet, "{}").get();
		String stewardDid = stewardResult.getDid();
		System.out.println("Steward DID: " + stewardDid);
		System.out.println("Steward Verkey: " + stewardResult.getVerkey());
		String myVerkey = stewardResult.getVerkey();
		System.out.println("myDid:\n" + stewardDid);
		System.out.println("myVerkey:\n" + myVerkey);


		//3. Issuer create Schema Definition
		String schemaName = "gvt";
		String schemaVersion = "8.0";
		String schemaAttributes = "[\"name\", \"age\", \"sex\", \"height\"]";
		AnoncredsResults.IssuerCreateSchemaResult createSchemaResult =
				issuerCreateSchema(stewardDid, schemaName, schemaVersion, schemaAttributes).get();
		String schemaId = createSchemaResult.getSchemaId();
		String schemaDataJSON = createSchemaResult.getSchemaJson();
		System.out.println("schemaDataJSON:\n" + schemaDataJSON);

		String schemaRequest = Ledger.buildSchemaRequest(stewardDid, schemaDataJSON).get();
		System.out.println("Schema request:\n" + schemaRequest);
		
		System.out.println("\n3. Sending the SCHEMA request to the ledger\n");
		String schemaResponse = Ledger.signAndSubmitRequest(pool, stewardWallet, stewardDid, schemaRequest).get();
		System.out.println("Schema response:\n" + schemaResponse);
				
		String getSchemaRequest = Ledger.buildGetSchemaRequest(stewardDid, schemaId).get();
		System.out.println("getSchemaRequest response:\n" + schemaResponse);	

		//4.3. Issuer create Credential Definition
		String credDefTag = "TAG1";
		String credDefConfigJson = "{\"support_revocation\":false}";
		AnoncredsResults.IssuerCreateAndStoreCredentialDefResult createCredDefResult =
				issuerCreateAndStoreCredentialDef(stewardWallet, stewardDid, schemaDataJSON, credDefTag, "CL", credDefConfigJson).get();
		String credDefId = createCredDefResult.getCredDefId();
		String credDefJson = createCredDefResult.getCredDefJson();
		System.out.println("credDefJson:\n" + credDefJson);

		String credDefRequest = Ledger.buildCredDefRequest(stewardDid, credDefJson).get();
		System.out.println("credDefRequest request:\n" + credDefRequest);

		System.out.println("\n4. Sending the CRED request to the ledger\n");
		String credResponse = Ledger.signAndSubmitRequest(pool, stewardWallet, stewardDid, credDefRequest).get();
		System.out.println("credResponse response:\n" + credResponse);

		
		//14. Close and Delete issuer wallet
		stewardWallet.closeWallet().get();
		Wallet.deleteWallet(issuerWalletConfig, issuerWalletCredentials).get();

		//16. Close pool
		pool.closePoolLedger().get();
		Pool.deletePoolLedgerConfig(poolName).get();
	
	}

	SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#noProviders for further details.

2. Generating and storing steward DID and Verkey

Steward DID: Th7MpTaRZVRYnPiabds81Y
Steward Verkey: FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4
myDid:
Th7MpTaRZVRYnPiabds81Y
myVerkey:
FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4
schemaDataJSON:
{"ver":"1.0","id":"Th7MpTaRZVRYnPiabds81Y:2:gvt:8.0","name":"gvt","version":"8.0","attrNames":["age","name","height","sex"],"seqNo":null}
Schema request:
{"reqId":1553572547396015000,"identifier":"Th7MpTaRZVRYnPiabds81Y","operation":{"type":"101","data":{"name":"gvt","version":"8.0","attr_names":["age","name","height","sex"]}},"protocolVersion":2}

3. Sending the SCHEMA request to the ledger

Schema response:
{"reqId":1553572547396015000,"reason":"client request invalid: InvalidClientRequest('Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name gvt and version 8.0',)","op":"REJECT","identifier":"Th7MpTaRZVRYnPiabds81Y"}
getSchemaRequest response:
{"reqId":1553572547396015000,"reason":"client request invalid: InvalidClientRequest('Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name gvt and version 8.0',)","op":"REJECT","identifier":"Th7MpTaRZVRYnPiabds81Y"}
credDefJson:
{"ver":"1.0","id":"Th7MpTaRZVRYnPiabds81Y:3:CL:Th7MpTaRZVRYnPiabds81Y:2:gvt:8.0:TAG1","schemaId":"Th7MpTaRZVRYnPiabds81Y:2:gvt:8.0","type":"CL","tag":"TAG1","value":{"primary":{"n":"87730354642528011568463441921264406486941695861642081458131636928373002160117941521961719286057872643154153114267378954170805719710347701383171587707219575040437999327174427920507294202471423980546023092000687289015397032340182496047206606580871763887019019835077201088705196662839635109815557679612411650586128592379986488962674161602333118101182904256264170971017974585375403221197512985980212810575494460920795150352773359129930262352596444951018996788990844349023595101677873114646358383836811951841474901687562370284522642097006153868694933432466690555888745616056368718910576276471971757863422205472384698362349","s":"27965370303456340417137478957153397204146776176732573857648891383518435094641756879833724460705793011641183519200921944531529168176131979980687837660478464863423453044667344426216247429697917680851564348667699092395590351016151965775196401829928050627169851916211736478039026472358437887110896490355651167723745002657172607096761914839363365372459996380403594848001467030295864889956286091585793257336648142592588602606390382469475226478257411103527971309767876023494377197257338999751718779137672414930854548660396585049799905313978602931937490943340327125579550829494470896932520597625967534444091449268656761560387","r":{"master_secret":"83555519439539383263879072151823447335586551754006603451981071383244810397844651550829050817726943583304154975667925293884788745068608000354538912156548668968450240194560353295426098219558282393543183286874550079691328714933452691295997976206849432253743597698181195395988650939174161247945970679040335807087409449069654750683793120889836790738977872477761678528330975107133530467100419548697658547312128202898993836098814006718339675887070125700447855052149972784789490107261970922224630487406389407878382531389487980908826922996349558740147693155631227452761052760213867556385025409069480750350763038023483916351151","age":"39509588865661870642700768581803666982491909604507615291902562837592868819714953847001300663388999037370672941537789726300728653595949244288907527938231646280925054399348698823277938580096886447013379952281990737535462537798946228882161114944036685742440516172428363861334619904096508329142408811543508722805993066838395743316247867483570603862769280893529755734884343360406778201073350860710917857919063726627696963957335016638933783576703676276604170203724399414180675849467971442179171295507909338408837642955696913724365682606224630731071427994556602594844197861947174598752703988761793519685143083385255331574225","height":"36974242236551844424571222657549348385446738248553351781120141921572257373675265750294112837572578026409292218826701991588586629236013127106509146787448281175844998217610975503947832368891870946138859123276516384170601391592329682376957309576785436881596148182302646371474344950091830796837264658700282702449626048680100300069683078941336802512313834164019048270805743198684629707484154350819534087223266627107818213990482340735779192070533912104751659252787525915674032493440062091959802630485146405122952342080536769918955385504977572077580765886267776883009065031250618667837092883383762798572217031226508857351623","name":"24322695039262647832689954371657030302568499821017435769283665085893637858700096602075663280048599010794339552507538946958506422322388655715178638165952106341137514594919818699835478262865887615727547405140753300178998697495514981450420803003637946726100805064709620094577574662544161683767880531475683987659437145331201053808846210498112468048024473582786450073841537345702706114082128496869331085227727898297966025720078137688114505920369363316971011458319425169565671778756167729934663190893375869729369574683647704614676670987387254688566835707564088004009228831017662335265731620423677700709107776529496909133621","sex":"53296437526003734986966815887301054245830792118814871117535747982569029705555863530175687261467948113097445379494958210328731383753290086133423081987027422353634352287618827655544401875163963840601338007364783389603605331991403199294257777478979062234541878522213757942417012708558378889730237420812567116772770333303184204283386389034319015788272512976541124359037518496829200840919756661526949310833942112498439581194915772248798475940135967832031534148273924016788428907867269836174994801351191323236673593640361834877382457604523730150231955992814136473488009441031484999118763861121113503816682087095512388402454"},"rctxt":"7194266686090500134140120428409307150082182625830633185249661174361356901983237734848475446997605266462211460456713022611132443997519319520931560551925758748135257006832865018576870485711526385093949089219616830966845785062277853204231266997373195252034812773476799761795245160048802514577302055933069079821040000588540427227119185393478355099931458430476938829300406743527072298057043976096312861721048832396315443599807035046333285764717793852446734030210506624620172420060170191524412440312040873655960258020258293177568027550132006844233682699253246288556664278002771497184299583408708156979675143079599482510204","z":"85448630487490029495850959965211845947087445080746777130471106229718702515561162816282870562532157904535905840707880296671792726218728137048040251278263468801341867518522675655135094952621194714518978346897271113139767966313502513316326097711900547203761800517924393064072987942725845425091192428859161326689475943118198406155551550649124286766834332661550610422591870340063793385832412959508305261331963693780517133997553966726982513960646043270211486997077334354656368721290819313185937183217480654385730797914847469753487912276292351978831335488008775925660538291754264705958098272041506273597473828019116760106630"}}}
credDefRequest request:
{"reqId":1553572577843465300,"identifier":"Th7MpTaRZVRYnPiabds81Y","operation":{"ref":0,"data":{"primary":{"n":"87730354642528011568463441921264406486941695861642081458131636928373002160117941521961719286057872643154153114267378954170805719710347701383171587707219575040437999327174427920507294202471423980546023092000687289015397032340182496047206606580871763887019019835077201088705196662839635109815557679612411650586128592379986488962674161602333118101182904256264170971017974585375403221197512985980212810575494460920795150352773359129930262352596444951018996788990844349023595101677873114646358383836811951841474901687562370284522642097006153868694933432466690555888745616056368718910576276471971757863422205472384698362349","s":"27965370303456340417137478957153397204146776176732573857648891383518435094641756879833724460705793011641183519200921944531529168176131979980687837660478464863423453044667344426216247429697917680851564348667699092395590351016151965775196401829928050627169851916211736478039026472358437887110896490355651167723745002657172607096761914839363365372459996380403594848001467030295864889956286091585793257336648142592588602606390382469475226478257411103527971309767876023494377197257338999751718779137672414930854548660396585049799905313978602931937490943340327125579550829494470896932520597625967534444091449268656761560387","r":{"height":"36974242236551844424571222657549348385446738248553351781120141921572257373675265750294112837572578026409292218826701991588586629236013127106509146787448281175844998217610975503947832368891870946138859123276516384170601391592329682376957309576785436881596148182302646371474344950091830796837264658700282702449626048680100300069683078941336802512313834164019048270805743198684629707484154350819534087223266627107818213990482340735779192070533912104751659252787525915674032493440062091959802630485146405122952342080536769918955385504977572077580765886267776883009065031250618667837092883383762798572217031226508857351623","name":"24322695039262647832689954371657030302568499821017435769283665085893637858700096602075663280048599010794339552507538946958506422322388655715178638165952106341137514594919818699835478262865887615727547405140753300178998697495514981450420803003637946726100805064709620094577574662544161683767880531475683987659437145331201053808846210498112468048024473582786450073841537345702706114082128496869331085227727898297966025720078137688114505920369363316971011458319425169565671778756167729934663190893375869729369574683647704614676670987387254688566835707564088004009228831017662335265731620423677700709107776529496909133621","master_secret":"83555519439539383263879072151823447335586551754006603451981071383244810397844651550829050817726943583304154975667925293884788745068608000354538912156548668968450240194560353295426098219558282393543183286874550079691328714933452691295997976206849432253743597698181195395988650939174161247945970679040335807087409449069654750683793120889836790738977872477761678528330975107133530467100419548697658547312128202898993836098814006718339675887070125700447855052149972784789490107261970922224630487406389407878382531389487980908826922996349558740147693155631227452761052760213867556385025409069480750350763038023483916351151","age":"39509588865661870642700768581803666982491909604507615291902562837592868819714953847001300663388999037370672941537789726300728653595949244288907527938231646280925054399348698823277938580096886447013379952281990737535462537798946228882161114944036685742440516172428363861334619904096508329142408811543508722805993066838395743316247867483570603862769280893529755734884343360406778201073350860710917857919063726627696963957335016638933783576703676276604170203724399414180675849467971442179171295507909338408837642955696913724365682606224630731071427994556602594844197861947174598752703988761793519685143083385255331574225","sex":"53296437526003734986966815887301054245830792118814871117535747982569029705555863530175687261467948113097445379494958210328731383753290086133423081987027422353634352287618827655544401875163963840601338007364783389603605331991403199294257777478979062234541878522213757942417012708558378889730237420812567116772770333303184204283386389034319015788272512976541124359037518496829200840919756661526949310833942112498439581194915772248798475940135967832031534148273924016788428907867269836174994801351191323236673593640361834877382457604523730150231955992814136473488009441031484999118763861121113503816682087095512388402454"},"rctxt":"7194266686090500134140120428409307150082182625830633185249661174361356901983237734848475446997605266462211460456713022611132443997519319520931560551925758748135257006832865018576870485711526385093949089219616830966845785062277853204231266997373195252034812773476799761795245160048802514577302055933069079821040000588540427227119185393478355099931458430476938829300406743527072298057043976096312861721048832396315443599807035046333285764717793852446734030210506624620172420060170191524412440312040873655960258020258293177568027550132006844233682699253246288556664278002771497184299583408708156979675143079599482510204","z":"85448630487490029495850959965211845947087445080746777130471106229718702515561162816282870562532157904535905840707880296671792726218728137048040251278263468801341867518522675655135094952621194714518978346897271113139767966313502513316326097711900547203761800517924393064072987942725845425091192428859161326689475943118198406155551550649124286766834332661550610422591870340063793385832412959508305261331963693780517133997553966726982513960646043270211486997077334354656368721290819313185937183217480654385730797914847469753487912276292351978831335488008775925660538291754264705958098272041506273597473828019116760106630"}},"type":"102","signature_type":"CL","tag":"TAG1"},"protocolVersion":2}

4. Sending the CRED request to the ledger

@@@@@@@@credResponse response:
{"identifier":"Th7MpTaRZVRYnPiabds81Y","reason":"client request invalid: InvalidClientRequest('validation error [ClientClaimDefSubmitOperation]: cannot be smaller than 1 (ref=0)',)","reqId":1553572577843465300,"op":"REQNACK"}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


static void demoStewardCreateFaberCred() throws Exception {
		
		
		// Set protocol version 2 to work with Indy Node 1.4
		Pool.setProtocolVersion(PROTOCOL_VERSION).get();
		
		//1. Create and Open Pool
		String DEFAULT_POOL_NAME = "default_pool";
		String poolName = PoolUtils.createPoolLedgerConfig();
		Pool pool = Pool.openPoolLedger(poolName, "{}").get();
		String stewardSeed = "000000000000000000000000Steward1";
		//String stewardSeed = "tx0000000000000000000000txeward2";
		
		//2. Issuer Create and Open Wallet		
		String issuerWalletConfig = "{\"id\":\"govWallet\"}";
		String issuerWalletCredentials = "{\"key\":\"gov_wallet_key\"}";
		Wallet.createWallet(issuerWalletConfig, issuerWalletCredentials).get();
		Wallet stewardWallet = Wallet.openWallet(issuerWalletConfig, issuerWalletCredentials).get();
		
		System.out.println("\n2. Generating and storing steward DID and Verkey\n");
		String did_json = "{\"seed\": \"" + stewardSeed + "\"}";
		DidResults.CreateAndStoreMyDidResult stewardResult = Did.createAndStoreMyDid(stewardWallet, did_json).get();
		String stewardDid = stewardResult.getDid();
		String stewardVerkey = stewardResult.getVerkey();
		System.out.println("Steward DID: " + stewardDid);
		System.out.println("Steward Verkey: " + stewardVerkey);


		//3. Issuer create Schema Definition
		String schemaName = "gvt";
		String schemaVersion = "8.0";
		String schemaAttributes = "[\"name\", \"age\", \"sex\", \"height\"]";
		AnoncredsResults.IssuerCreateSchemaResult createSchemaResult =
				issuerCreateSchema(stewardDid, schemaName, schemaVersion, schemaAttributes).get();
		String schemaId = createSchemaResult.getSchemaId();
		String schemaDataJSON = createSchemaResult.getSchemaJson();
		System.out.println("schemaDataJSON:\n" + schemaDataJSON);

		String schemaRequest = Ledger.buildSchemaRequest(stewardDid, schemaDataJSON).get();
		System.out.println("Schema request:\n" + schemaRequest);
		
		System.out.println("\n3. Sending the SCHEMA request to the ledger\n");
		String schemaResponse = Ledger.signAndSubmitRequest(pool, stewardWallet, stewardDid, schemaRequest).get();
		System.out.println("Schema response:\n" + schemaResponse);
				
		String getSchemaRequest = Ledger.buildGetSchemaRequest(stewardDid, schemaId).get();
		System.out.println("getSchemaRequest response:\n" + schemaResponse);	
		
		// 4. peking create Create and Open Wallet		
		String trusteeSeed = "000000000000000000000000Trustee1";
		String trusteeWalletConfig = "{\"id\":\"pekingWallet\"}";
		String trusteeWalletCredentials = "{\"key\":\"peking_wallet_key\"}";
		Wallet.createWallet(trusteeWalletConfig, trusteeWalletCredentials).get();
		Wallet trusteeWallet = Wallet.openWallet(trusteeWalletConfig, trusteeWalletCredentials).get();
		
		
		DidJSONParameters.CreateAndStoreMyDidJSONParameter pekingDidJson =
				new DidJSONParameters.CreateAndStoreMyDidJSONParameter(null, trusteeSeed, null, null);
		CreateAndStoreMyDidResult createPekingDidResult = Did.createAndStoreMyDid(trusteeWallet, pekingDidJson.toJson()).get();
		String trusteeDid = createPekingDidResult.getDid();
		System.out.println("peking trusteeDid:\n" + trusteeDid);
		System.out.println("peking trustee Verkey:\n" + createPekingDidResult.getVerkey());
		
		//  4.2.1 Build Nym Request
		String nymRequest = buildNymRequest(trusteeDid, stewardDid, stewardVerkey, null, null).get();
		System.out.println("nymRequest:\n" + nymRequest);
	
		String nymResponseJson = signAndSubmitRequest(pool, trusteeWallet, trusteeDid, nymRequest).get();
		System.out.println("nymResponseJson:\n" + nymResponseJson);		
		JSONObject nymResponse = new JSONObject(nymResponseJson);
		System.out.println("nymResponse:\n" + nymResponse);

		
		assertEquals(stewardDid, nymResponse.getJSONObject("result").getJSONObject("txn").getJSONObject("data").getString("dest"));
		assertEquals(stewardVerkey, nymResponse.getJSONObject("result").getJSONObject("txn").getJSONObject("data").getString("verkey"));
		
		
		//5. Issuer create Credential Definition
		String credDefTag = "TAG1";
		String credDefConfigJson = "{\"support_revocation\":false}";
		AnoncredsResults.IssuerCreateAndStoreCredentialDefResult createCredDefResult =
				issuerCreateAndStoreCredentialDef(stewardWallet, stewardDid, schemaDataJSON, credDefTag, "CL", credDefConfigJson).get();
		String credDefId = createCredDefResult.getCredDefId();
		String credDefJson = createCredDefResult.getCredDefJson();
		System.out.println("credDefJson:\n" + credDefJson);

		String credDefRequest = Ledger.buildCredDefRequest(trusteeDid, credDefJson).get();
		System.out.println("credDefRequest request:\n" + credDefRequest);

		System.out.println("\n4. Sending the CRED request to the ledger\n");
		String credResponse = Ledger.signAndSubmitRequest(pool, trusteeWallet, trusteeDid, credDefRequest).get();
		System.out.println("credResponse response:\n" + credResponse);

		
		//14. Close and Delete issuer wallet
		stewardWallet.closeWallet().get();
		Wallet.deleteWallet(issuerWalletConfig, issuerWalletCredentials).get();

		//16. Close pool
		pool.closePoolLedger().get();
		Pool.deletePoolLedgerConfig(poolName).get();
	
	}

	SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#noProviders for further details.

2. Generating and storing steward DID and Verkey

Steward DID: Th7MpTaRZVRYnPiabds81Y
Steward Verkey: FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4
schemaDataJSON:
{"ver":"1.0","id":"Th7MpTaRZVRYnPiabds81Y:2:gvt:8.0","name":"gvt","version":"8.0","attrNames":["height","age","sex","name"],"seqNo":null}
Schema request:
{"reqId":1553572644393508200,"identifier":"Th7MpTaRZVRYnPiabds81Y","operation":{"type":"101","data":{"name":"gvt","version":"8.0","attr_names":["name","sex","age","height"]}},"protocolVersion":2}

3. Sending the SCHEMA request to the ledger

Schema response:
{"reqId":1553572644393508200,"reason":"client request invalid: InvalidClientRequest('Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name gvt and version 8.0',)","op":"REJECT","identifier":"Th7MpTaRZVRYnPiabds81Y"}
getSchemaRequest response:
{"reqId":1553572644393508200,"reason":"client request invalid: InvalidClientRequest('Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name gvt and version 8.0',)","op":"REJECT","identifier":"Th7MpTaRZVRYnPiabds81Y"}
peking trusteeDid:
V4SGRU86Z58d6TV7PBUe6f
peking trustee Verkey:
GJ1SzoWzavQYfNL9XkaJdrQejfztN4XqdsiV4ct3LXKL
nymRequest:
{"reqId":1553572646138721800,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"dest":"Th7MpTaRZVRYnPiabds81Y","type":"1","verkey":"FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4"},"protocolVersion":2}
nymResponseJson:
{"identifier":"V4SGRU86Z58d6TV7PBUe6f","reason":"client request invalid: UnauthorizedClientRequest('actor must be owner',)","op":"REJECT","reqId":1553572646138721800}
nymResponse:
{"identifier":"V4SGRU86Z58d6TV7PBUe6f","reason":"client request invalid: UnauthorizedClientRequest('actor must be owner',)","op":"REJECT","reqId":1553572646138721800}
Exception in thread "main" org.json.JSONException: JSONObject["result"] not found.
	at org.json.JSONObject.get(JSONObject.java:471)
	at org.json.JSONObject.getJSONObject(JSONObject.java:636)
	at Anoncreds.demoStewardCreateFaberCred(Anoncreds.java:105)
	at Anoncreds.main(Anoncreds.java:28)
